/**
 * n = 5 时 32个
 * 00000 0
 * 00001 1
 * 00011 3
 * 00010 2
 * 00110 6
 * 00111 7
 * 00101 5
 * 00100 4
 * 01100 12
 * 01101 13
 * 01111 15
 * 01110 14
 * 01010 10
 * 01011 11
 * 01001 9
 * 01000 8
 * 11000
 * 11001
 * 11011
 * 11010
 * 11110
 * 11111
 * 11101
 * 11100
 * 10100
 * 10101
 * 10111
 * 10110
 * 10010
 * 10011
 * 10001
 * 10000
 * 首先,数量为 2^n
 *
 * 千位出现的规律为 0000 0000 1111 1111 0000 0000 1111 1111
 * 万位出现的规律为 0000 0000 0000 0000 1111 1111 1111 1111
 *
 * 到千位以上的时候,可以发现,数字基本稳定成 两批 循环增加
 *
 * n = 1 [0,1] 2
 * n = 2 [0,1,3,2] 4
 * n = 3 [0,1,3,2,6,7,5,4] 8
 * @param {number} n
 * @return {number[]}
 */

var getOneOrZero = function (x, y) {
    // 计算第 n 位(从右往左数)
    // n = 1 即表示个位 x 表示顺序,第几
    // if (x % 4 >= 1 && x % 4 <= 2) {
    //     return 1
    // } else {
    //     return 0
    // }
    // // x = 2 即表示十位
    // if (x % 8 >= 3 && x % 8 <= 6) {
    //     return 1
    // } else {
    //     return 0
    // }
    // // x = 3 即表示百位
    // if (x % 16 >= 5 && x % 16 <= 12) {
    //     return 1
    // }else {
    //     return 0
    // }
    /*
        从顺序找找到规律
        0 的起始个数为 1 2 4 8 16
        分别为 2 的 0,1,2,3,4次方
        1 的个数分别为 2 4 8 16
        分别为 2 的 1,2,3,4,5次方
        1 0110                                                            4 位一循环      2 - 3 为1
        2 0011 1100                                                       8 位一循环      3 - 6
        3 0000 1111 1111 0000                                             16 位一循环     5 - 12
        4 0000 0000 1111 1111 1111 1111 0000 0000                                   32 位一循环     9 - 24
        5 0000 0000 0000 0000 1111 1111 1111 1111 1111 1111 1111 1111 0000 0000 0000 0000    64 位一循环     17 - 48

        2 的 n+1 次方一次循环
        */
    // 计算第 x 位 (倒着数),顺序第 y 个
    if ((y % Math.pow(2, x + 1)) >= (Math.pow(2, x - 1) + 1)
        && (y % Math.pow(2, x + 1)) <= (Math.pow(2, x - 1) + Math.pow(2, x))) {
        return 1
    } else {
        return 0
    }
}

var countSingleNum = function (x, y) {
    // 计算第 x 位 (倒着数),所代表的值
    return Math.pow(2, x - 1) * getOneOrZero(x, y)
}

var grayCode = function (n) {
    // 比如计算 n = 5 的时候,格雷码的数值
    // 首先你得先把00000 ,这种二进制的数字算出来

    // x 表示横向的
    // y 表示纵向的
    /*
    *  ＜--------x(表示横向的个数)
    *          0 0  y(表示纵向的个数)
    *          0 1  \
    *          1 1  \
    *          1 0  \
    *              ∨
    * */

    var x = n
    var y = Math.pow(2, n)
    var resultArr = []
    for (var i = 1; i <= y; i++) {
        var sumNum = 0
        for (var j = 1; j <= x; j++) {
            var singleNum = countSingleNum(j, i)
            sumNum = sumNum + singleNum
        }
        resultArr.push(sumNum)
    }
    //console.log(resultArr) // test log
    return resultArr
}

grayCode(4)